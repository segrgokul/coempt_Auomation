package dataProcessing;


	import org.apache.pdfbox.pdmodel.PDDocument;

	import java.io.File;
	import java.io.IOException;
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.nio.file.attribute.FileTime;
	import java.util.Comparator;

	public class ReadPdfData {

	    public static void main(String[] args) {
	        String downloadsFolder = System.getProperty("user.home") + "/Downloads";

	        try {
	            // Find the latest PDF file in the Downloads folder
	            File latestPDF = getLatestPDF(downloadsFolder);
	            System.out.println("Downloads folder: " + downloadsFolder);
	           
	       
	            if (latestPDF != null) {
	                System.out.println("Latest PDF file found: " + latestPDF.getName());

	                // Validate the PDF
	                boolean isValid = validatePDF(latestPDF);
	                if (isValid) {
	                    System.out.println("The PDF is valid.");
	                } else {
	                    System.out.println("The PDF is invalid or corrupt.");
	                }
	            } else {
	            	
	            	File folder = new File(downloadsFolder);
	            	if (!folder.exists() || !folder.isDirectory()) {
	            	    System.out.println("Downloads folder does not exist or is not a directory.");
	            	}
	                System.out.println("No PDF files found in the Downloads folder.");
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }

	    // Find the latest PDF file in the given folder
	    public static File getLatestPDF(String folderPath) {
	        try {
	            File folder = new File(folderPath);

	            // Filter for PDF files and get the latest one based on last modified time
	            return Files.list(folder.toPath())
	                    .filter(path -> path.toString().toLowerCase().endsWith(".pdf"))
	                    .max(Comparator.comparing(path -> {
	                        try {
	                            return Files.getLastModifiedTime(path);
	                        } catch (Exception e) {
	                            e.printStackTrace();
	                            return FileTime.fromMillis(0);
	                        }
	                    }))
	                    .map(Path::toFile)
	                    .orElse(null);
	        } catch (Exception e) {
	            e.printStackTrace();
	            return null;
	        }
	    }
	

	    // Get the last modified time of a file
	    private static FileTime getLastModifiedTime(Path path) {
	        try {
	            return Files.getLastModifiedTime(path);
	        } catch (IOException e) {
	            e.printStackTrace();
	            return FileTime.fromMillis(0);
	        }
	    }

	    // Validate the PDF
	    public static boolean validatePDF(File file) {
	        try (PDDocument document = PDDocument.load(file)) {
	            return !document.isEncrypted(); // Example validation: check if the PDF is not encrypted
	        } catch (IOException e) {
	            System.out.println("Error validating PDF: " + e.getMessage());
	            return false;
	        }
	    }
	    
	    
	}


